-- File: brightness_increement.vhd
-- Generated by MyHDL 0.9.0
-- Date: Wed Mar 29 19:40:30 2017


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_090.all;

entity brightness_increement is
    port (
        i_r: in unsigned(7 downto 0);
        i_g: in unsigned(7 downto 0);
        i_b: in unsigned(7 downto 0);
        i_brightness: in unsigned(7 downto 0);
        i_clk: in unsigned(7 downto 0);
        o_r: out unsigned(7 downto 0);
        o_g: out unsigned(7 downto 0);
        o_b: out unsigned(7 downto 0)
    );
end entity brightness_increement;


architecture MyHDL of brightness_increement is


constant x: integer := -1;



signal blu: unsigned(7 downto 0);
signal gre: unsigned(7 downto 0);
signal red: unsigned(7 downto 0);

function MYHDL3_truncate(
    x: in integer
    ) return natural is
begin
    if (x > 255) then
        return 255;
    end if;
    return x;
end function MYHDL3_truncate;

function MYHDL4_truncate(
    x: in integer
    ) return natural is
begin
    if (x > 255) then
        return 255;
    end if;
    return x;
end function MYHDL4_truncate;

function MYHDL5_truncate(
    x: in integer
    ) return natural is
begin
    if (x > 255) then
        return 255;
    end if;
    return x;
end function MYHDL5_truncate;

begin





BRIGHTNESS_INCREEMENT_RUN: process (i_clk) is
begin
    if rising_edge(i_clk) then
        red <= to_unsigned(MYHDL3_truncate((i_r + i_brightness)), 8);
        gre <= to_unsigned(MYHDL4_truncate((i_g + i_brightness)), 8);
        blu <= to_unsigned(MYHDL5_truncate((i_b + i_brightness)), 8);
    end if;
end process BRIGHTNESS_INCREEMENT_RUN;



o_r <= red;
o_g <= gre;
o_b <= blu;

end architecture MyHDL;
