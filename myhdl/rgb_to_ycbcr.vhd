-- File: rgb_to_ycbcr.vhd
-- Generated by MyHDL 0.9.0
-- Date: Wed Mar 29 17:09:00 2017


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_090.all;

entity rgb_to_ycbcr is
    port (
        i_r: in unsigned(7 downto 0);
        i_g: in unsigned(7 downto 0);
        i_b: in unsigned(7 downto 0);
        i_clk: in unsigned(7 downto 0);
        o_r: out unsigned(7 downto 0);
        o_g: out unsigned(7 downto 0);
        o_b: out unsigned(7 downto 0)
    );
end entity rgb_to_ycbcr;


architecture MyHDL of rgb_to_ycbcr is





signal blu: unsigned(7 downto 0);
signal gre: unsigned(7 downto 0);
signal red: unsigned(7 downto 0);

begin





RGB_TO_YCBCR_RUN: process (i_clk) is
    variable b: integer;
    variable rednext: integer;
    variable g: integer;
    variable blunext: integer;
    variable r: integer;
    variable grenext: integer;
begin
    if rising_edge(i_clk) then
        4 * 1 ns
        r := to_integer(i_r);
        g := to_integer(i_g);
        b := to_integer(i_b);
        rednext := ((((0.257 * r) + (0.504 * g)) + (0.098 * b)) + 16);
        red <= Signal(rednext(8-1 downto 0));
        grenext := (((((-0.148) * r) - (0.291 * g)) + (0.439 * b)) + 128);
        gre <= Signal(grenext(8-1 downto 0));
        blunext := ((((0.439 * r) - (0.368 * g)) - (0.071 * b)) + 128);
        blu <= Signal(blunext(8-1 downto 0));
    end if;
end process RGB_TO_YCBCR_RUN;



o_r <= red;
o_g <= gre;
o_b <= blu;

end architecture MyHDL;
